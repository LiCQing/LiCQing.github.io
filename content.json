{"meta":{"title":"L","subtitle":"栗子树上苹果花","description":"废宅一个","author":"Li","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于我","date":"2019-04-04T09:42:39.000Z","updated":"2019-04-05T07:25:53.652Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"有关于你"},{"title":"categories","date":"2019-04-04T09:42:00.000Z","updated":"2019-04-04T10:01:10.759Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"我的标签","date":"2019-04-06T09:29:58.000Z","updated":"2019-04-06T09:34:41.626Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"利用Hexo+Github完成搭建个人博客（2-配置与发布博客）","slug":"create-hexo2","date":"2019-04-06T14:14:14.000Z","updated":"2019-04-06T14:20:59.434Z","comments":true,"path":"2019/04/06/create-hexo2/","link":"","permalink":"http://yoursite.com/2019/04/06/create-hexo2/","excerpt":"寻找模板接上篇，之前已经把博客搭建好了，但是默认的肯定过于单调了些，需要我们进行完善。完善的第一步当然是需要去hexo官方主题找一个中意的模板。里面有很多的主题，点击某个主题之后能进行预览效果。选主题好看是一个方面，另一个是最好有文档教程可以学习配置。不然拿来一个主题，也不能做得酷炫。在预览主题界面一般会有一个GitHub的连接，点击之后会跳转到存放该主题的仓库，里面一般都会有主题的使用教程。我选的是Next主题，Next主题相对来说比较简洁方便，主要是配置教程文档比较详细，在网上也能找到很多相关教程。先来看看GitHub上大佬的示例，然后再确定我们自己的博客应该如何搭配。 Miaia，有Next最近使用教程。uchuhimoAcrisDandy以上几个博客，也说明了Next还提供了不同的布局模板，也就是说，我们选了Next之后，还可以再进行选择。","text":"寻找模板接上篇，之前已经把博客搭建好了，但是默认的肯定过于单调了些，需要我们进行完善。完善的第一步当然是需要去hexo官方主题找一个中意的模板。里面有很多的主题，点击某个主题之后能进行预览效果。选主题好看是一个方面，另一个是最好有文档教程可以学习配置。不然拿来一个主题，也不能做得酷炫。在预览主题界面一般会有一个GitHub的连接，点击之后会跳转到存放该主题的仓库，里面一般都会有主题的使用教程。我选的是Next主题，Next主题相对来说比较简洁方便，主要是配置教程文档比较详细，在网上也能找到很多相关教程。先来看看GitHub上大佬的示例，然后再确定我们自己的博客应该如何搭配。 Miaia，有Next最近使用教程。uchuhimoAcrisDandy以上几个博客，也说明了Next还提供了不同的布局模板，也就是说，我们选了Next之后，还可以再进行选择。 下载主题为了能使用该主题，我们先在存放博客文件的目录下进行Git Bash，将Next下载到本地。 1git clone https://github.com/iissnan/hexo-theme-next themes/next 我们可以看到在themes文件夹下多了一个Next文件夹，这个就是我们下载的主题。下载过来先不急，Hexo和Next为了让用户专注写博客，减小对代码的关注，大多都使用配置进行设置Next主题。所以我们先来了解两个配置文件。 配置站点站点配置文件：位于博客根目录下的 _config.yml，对整个站点的基本内容进行更改。如标题、作者等等。主题配置文件：位于themes\\next下的_config.yml，对当前主题的相关设置。如图标、布局等等。因为它们的文件名是一样的，所以用站点文件和主题文件来区分它们。首先是站点文件配置：hexo官方文档介绍得非常详细，我们就对主要的几个进行简单介绍和配置。# Site 下面:然后继续,或者直接搜索 ‘theme’ ，把字段改成next，表示使用next主题，如果是使用的其他主题的话，就改成其他主题名字：修改之后，重新生成页面和启动服务，默认样式如下：可以看到我们修改的已经生效了，标题和副标题。如果中文显示乱码的话，记事本打开_config.yml，文件 -&gt; 另存为 -&gt; 选择编码 UTF-8 -&gt; 确定（默认是相同目录，替换就ok） 配置主题站点先暂时配置到这，其他的后面有需要再配置。下面进行主题配置。打开\\themes\\next下的_config.yml文件。其实如果英语比较好的话，里面注释都讲的比较详细了，一直往下设置就ok。不过英语不好的我，只能参考Next文档进行配置。 首先配置整个网站的主题布局等等，就按照Next使用文档的配置顺序来配置一下。 选择主题[Scheme]这个主题是Next的外观，我们可以在主题文件里面搜索 “scheme:”来找到设置位置：这个配置还有一个好处就是：支持动态设定，也就是修改了配置之后不需要重新生成静态文件，开启服务。在之前预览的页面直接刷新就可以了。刷新以后主题外观就改变了。 设置菜单所谓菜单就提供一个按钮，点击之后跳转到不同的地方。菜单设置就刚刚外观设置的上面一个，找不到可以进行搜索”menu“，找到相关字段：Next默认是只有home 和 archives。其他的菜单都被注释了，我们就把需要展示的菜单注释去掉，然后保存并刷新我们的预览页面。就可以看到以下效果了：在这里值得我们注意的是，菜单的设置格式 ，如：” tags: /tags/ || tags “ ； 好在配置文件里面也提供了注释，大致就是说，”名称:链接 || 图标“ 。所谓的名称并不会直接展示在网页上，而是会去\\next\\languages目录下，找到刚刚站点设置的语言文件，在里面进行查找匹配。所以我们在配置文件中写的是英文，但是我们网页展示的却是汉子。如果改成其他语言，自然也会替换成其他语言的文字展示。然后 || 之后的图标，Next会自动到FontAwesome上进行匹配。有兴趣的可以查看自己博客网页的源代码，图标就是使用的fa fa-*格式。在菜单这里还有一点就是，目前我们只能看这个菜单，如果点击的话，会出现404错误 或者是 Cannot GET /*/，这是因为我们本地没有相关的页面提供给它。 那我们就需要新建页面提供给主题进行访问。回到存放博客的根目录下，进行git bash（以标签为例）： 1hexo new page tags 之后我们会发现在博客根路径的source文件夹里面多了一个tags文件夹，我们继续打开就能发现一个index.md文件 ，然后需要编辑这个md文件，来让Next来识别它。我们需要添加一个type字段，添加tags (这个是对应了之前menu设置名称，点击tags菜单就能跳到这个页面)。然后我们重新生成，启动预览就可以点击菜单并且进去了。其他菜单同理。 设置侧边栏所谓侧边栏也就是我们展示我们刚刚菜单的那一栏，在配置文件中搜索Sidebar Settings，就可以看到相关设置。侧边栏可以展示的东西还挺多的，这里我们按照配置文件从上到下进行设置：1.社交链接（Social Links），用于展示其他的社交平。我们先把social的注释去掉，然后把需要展示的选项注释也去掉，在这里的设定格式和之前菜单是一样的，然后我们也可以添加自定义的社交连接。后面也有关于图标的设置，如果上面设置了图标，下面就不用添加了。设置一下是否显示图标和仅显示图标就ok。效果显示： 2.友情连接（Blog rolls），这个功能就不多介绍了，主要看怎么配置吧。效果如下： 3.设置头像（Sidebar Avatar）设置头像有三种方式： 将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在）配置为：avatar: /uploads/文件名 或者 放置在 source/images/ 目录，配置为：avatar: /images/文件名 还有就是直接使用网络连接，配置为：avatar: http://example.com/avatar.png 4.其他还有几个设定不是非常重要，但是也可以设置一下，不然就用默认的都可以。 设置文章内目录 12toc: enable: true 设置侧边栏展示在哪边 12position: left#position: right 侧边栏何时展示 1234#display: post #默认，存在目录列表显示display: always #在所有页面都显示#display: hide #在所有页面都隐藏，需要手动展开#display: remove #完全移除 添加一个内容已经查看的百分比，这个挺有意思的 1scrollpercent: true 第三方服务 网站访问统计，我们采用不蒜子提供的服务。进入不蒜子网页，有手动设置方式。不过现在Next配置文件，已经集成了。手动配置可以更加个性化一点。配置文件就比较方便。直接在配置文件中搜索busuanzi_count ，将下面的enable改成true就可以了。 1enable: true 文章阅读统计，在文件中搜索leancloud_visitors，使用LeanCloud帮助我们统计。先进入LeanCloud进行注册验证，然后新建应用，获取key 和id。随后将其填入我们的配置文件。 1234leancloud_visitors: enable: true app_id: app_key: 更多功能我的博客暂时配置到这里就差不多了（主要是东西挺多的，有点麻烦）。有需要更多炫酷功能可以进行百度查找，其他相关设置。如https://www.jianshu.com/p/f054333ac9e6https://www.jianshu.com/p/3a05351a37dc 新建博文前面的工作做了那么多，当然不仅仅是就搭建一个网站算了，书写博客才是我们的最终目的。在博客根目录下git bash ： 1hexo new title # title 文章标题 然后会提示: Created: D:\\CODE\\bolg2\\source_posts\\title.md 那就说明已经新建了一个新文章，然后照着这个目录找到刚刚新建的文件，打开之后会发现只有这一部分。官方文档称之为Front-matter，用于指定个别文件的变量。在这一部分，预先定义的内容有 layout 布局 title 标题 date 建立日期 updated 更新日期 comments 开启文章的评论功能 true/false tags 标签 categories 分类 permalink 覆盖网站网址一般就设定标题、标签、分类、时间就可以了，标题和时间hexo会自动帮我们加上，所以我们就手动添加标签和分类上去。 123456789---title: testdate: 2019-04-06 20:45:51tags:- Blog- Hexocategories:- learn,hexo --- 这里需要注意的是标签和分类的写法。然后还有分类只支持单分类，也就是说，如果你在分类下面写上两个，会用最后的一份分类指定给文章。不过分类虽然不支持平级，但是可以有从属，也就是父子级分类，使用,分割分类的层次关系。 高级编辑Hexo的博文使用MarkDown语法，多少会受到限制。为了弥补标签的不足，Hexo提供了标签插件来支持博文的多样化。大致分为以下几类 引用块，在文章中插入引言，可包含作者、来源和标题。语法如下： 123&#123;% blockquote [作者, 来源] [链接] [链接标题] %&#125;content&#123;% endblockquote %&#125; []中的为可选项，如引用歌词： 123456&#123;% blockquote [陈宏宇, 早春的树] %&#125;臂弯做衣架摇晃在庭前腰杆做长椅你轻靠,或躺下看书&#123;% endblockquote %&#125; 臂弯做衣架摇晃在庭前腰杆做长椅你轻靠,或躺下看书 [陈宏宇早春的树] 代码块，相对使用反引号而言更加具体描述的引用。 123&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; 如： 1234&#123;% codeblock [Thread] [lang:Java] [http://tool.oschina.net/apidocs/apidoc?api=jdk-zh] [java jdk] %&#125;PrimeThread p = new PrimeThread(143);p.start();&#123;% endcodeblock %&#125; [Thread] [] [http://tool.oschina.net/apidocs/apidoc?api=jdk-zh] [java jdk]12PrimeThread p = new PrimeThread(143);p.start(); 引用外部资源（图片、视频）图片： 1&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125; 视频： 12&#123;% youtube video_id %&#125; #插入youtube视频&#123;% vimeo video_id %&#125; #插入vimeo视频 资源文件（添加本地图片）统一管理适合只有少量图片或者需要重复使用的图片。放在主题source/images 文件夹中，通过![](/images/image.jpg)的方法来访问他们。 分散管理适用于每篇博文使用的不同的图片，更加组织化的方式来管理资源。可以非常方便的管理每篇博文的资源。 首先修改站点配置文件，找到post_asset_folder ，设置为true 1post_asset_folder: true 当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径仅输入文件名来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 相对路径引用的标签插件通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。 123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; 比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法![](/example.jpg) ，它将不会出现在首页上。（但是它会在文章中按你期待的方式工作） 正确的引用图片方式是使用下列的标签插件而不是 markdown ：通过这种方式，图片将会同时出现在文章和主页以及归档页中。","categories":[{"name":"learn","slug":"learn","permalink":"http://yoursite.com/categories/learn/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"利用Hexo+Github完成搭建个人博客（1-搭建）","slug":"create-hexo1","date":"2019-04-06T14:03:18.000Z","updated":"2019-04-06T14:21:29.639Z","comments":true,"path":"2019/04/06/create-hexo1/","link":"","permalink":"http://yoursite.com/2019/04/06/create-hexo1/","excerpt":"前言​ 最近在学java框架，想利用博客记录下来学习过程以及学习成果，同时也算为自己做一个笔记，平时都是使用Xmind思维导图做笔记，但是在手机上不太方便回顾。本来是打算自己用java写一个博客系统出来，一来记录自己的学习路程，二来可以作为毕业设计，不过考虑到打算重构之前的在线购物系统，以及水平能力有限，便放弃了这个想法。好在无意中接触了hexo，首先hexo的风格吸引了我，画面简洁。其次是功能强大，基本上该有的功能都有。再加上正在学习使用MarkDown书写工具，以及接触GitHub，可以说是各种机缘巧合。正好进行一个系统的全面的学习。​ 我分别在不同的电脑上搭建了两次博客，第一次是笔记本（win10），可以说是磕磕碰碰，最后勉勉强强算搭上了。第二次是在第一次记录的基础上，使用腾讯云服务器（win server 2012）进行搭建，整个过程都非常顺利，这个博客便是第二次搭配记录。跟着这个步骤，最多30分钟便能搭起一个基础的博客。不过基础的博客肯定不能满足后续的要求。 ​ 在下一篇学习页面设置和写/发博客。提前预览​ 建议搭配目录阅读","text":"前言​ 最近在学java框架，想利用博客记录下来学习过程以及学习成果，同时也算为自己做一个笔记，平时都是使用Xmind思维导图做笔记，但是在手机上不太方便回顾。本来是打算自己用java写一个博客系统出来，一来记录自己的学习路程，二来可以作为毕业设计，不过考虑到打算重构之前的在线购物系统，以及水平能力有限，便放弃了这个想法。好在无意中接触了hexo，首先hexo的风格吸引了我，画面简洁。其次是功能强大，基本上该有的功能都有。再加上正在学习使用MarkDown书写工具，以及接触GitHub，可以说是各种机缘巧合。正好进行一个系统的全面的学习。​ 我分别在不同的电脑上搭建了两次博客，第一次是笔记本（win10），可以说是磕磕碰碰，最后勉勉强强算搭上了。第二次是在第一次记录的基础上，使用腾讯云服务器（win server 2012）进行搭建，整个过程都非常顺利，这个博客便是第二次搭配记录。跟着这个步骤，最多30分钟便能搭起一个基础的博客。不过基础的博客肯定不能满足后续的要求。 ​ 在下一篇学习页面设置和写/发博客。提前预览​ 建议搭配目录阅读 1.概述​ Hexo官网：A fast, simple &amp; powerful blog framework,即:快速、简洁且高效的博客框架。基于Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。​ 也就是说，只需要30分钟左右就可以搭建一个属于自己的个人博客。同时又有丰富的插件可以使你尽可能的完善自己的博客细节。利用GitHub的git pages，可以托管我们的静态网页，而且可以自定义域名（参考中有）。等博客搭建完毕，我们就只需要写博客内容了。 2.搭建环境2.1 Node.js&emsp; &emsp; 一个JavaScript运行环境,我们使用它来生成我们博客的静态页面。如果不确定自己电脑上是否安装了Node.js,可以在cmd命令行下运行1npm -v ​ 运行结果如下表示未安装： ​ ​ 接下来我们需要去官网下载，进行安装。同时如果版本过低可能会导致部分功能丢失或者配置方法不同，建议6.0以上。​ ​ 安装完成之后我们再运行cmd命令会显示如下结果​ ​ 如果还是提示非命令，有可能是node没有加到环境变量中去，在环境变量的path中，加上刚刚的安装目录。（如我的安装目录：C:\\Program Files\\nodejs\\）有自定义目录需要修改成自定义目录。 2.2 Git 环境​ 接着我们就是需要安装Git了，同时我们先查看一下电脑是否安装了git，在cmd中执行 1git --version ​ 如果显示为非命令，则需要我们下载安装，可以上官网，如果下载较慢的话，也可以上某度云进行下载，安装过程基本上选择默认的就好了。建议版本2.0以上​ 验证是否安装成功同上，不过这次需要加的环境变量则是Git安装目录下的cmd，（如我的：C:\\Program Files\\Git\\cmd） 2.3 Git hub&emsp;&emsp;Git-hub,注册过程就不多赘述，基本上不会有什么问题。重要的是需要建立存放代码的仓库和添加SSHkey保证本地能正常上传代码到github。 1）建立仓库：登陆GitHub之后，在点击右上角的“+”号，选择 new repository。​ 在 Repository name中填入”用户名.github.io”。用户名就是GitHub的用户名。​ 最后点击create repository 这一步就ok了。​ 2）第二步，我们来添加SSHkey,确保我们本地有权限能够提交代码到github。首先我们仍然测试看看本地能否存在key（第一次当然是没有，不过为了和后面出现对比，我们可以先测试一下）。首先在桌面右击 -&gt; 选择Git Bash Here调出git命令台。输入下面命令： bash1ssh -T git@github.com 如果提示&lt; Are you sure you want to continue connecting (yes/no)?&gt;，输入yes ​ 这就是本地没有权限连接的，需要我们创建SSHkey。我们继续输入以下命令 bash1ssh-keygen -t rsa -C &quot;注册github的邮箱&quot; ​ 三次回车之后，会出项下面的结果：​ 然后git会自动在c盘用户下面的当前用户文件夹新建一个.ssh文件，里面有一个 id_rsa.pub 文件。使用记事本打开之后，复制里面的内容。​ 我们在本地生成好key之后，需要添加到github上。在GitHub网页进入个人设置选择SSH and GPG keys，新建一个ssh key：​ 把复制过来的内容粘贴在key框，上面的title可以写，也可以不写，不写会默认使用邮箱。如果为了区分多台客户端，可以填写区分一下。​ 保存之后，输入密码确认，跳转到sshkey页面，你会发现刚刚添加的key已经在里面了。到这里我们就已经添加成功了，于是我们再测试一下连接，出现以下结果就是正确的。 ​ 然后再运行以下命令，来让git记录我们的身份bash12git config --global user.name &quot;GitHub账号&quot;git config --global user.email &quot;注册邮箱&quot; ​ 到这里我们的准备工作就已经结束了。下面就开始搭建博客，如果到这里就放弃，那就前功尽弃了（加油）。 3.搭建博客3.1 安装hexo​ git bash 执行以下代码：bash1npm install -g hexo 可能会要一点时间，如果没有报错(ERR)，说明安装问题。 3.2搭建博客新建一个文件夹，用来存放我们的博客文件。右键 -&gt;git bash，依次运行以下代码。‘#’后面是注释 bash123hexo init #初始化hexo环境hexo g #生成静态页面hexo s #开启本地服务 执行完最后一条命令，会出现如上结果。从图中我们也得知，在浏览器输入&lt; http://localhost:4000/ &gt; 就可以浏览我们的博客了，然后按ctrl + c 结束本地服务。生成的静态文件就在public文件夹中。 至此我们就快大功告成，把代码同步到github让它帮我们管理代码。同时，我们也可以输入之前我们定义的仓库名，进行外网访问。不过，我们还要进行最后一步配置。 3.3配置并同步代码用文本文件打开刚刚存放博客文件的目录中的 `_config.yml` 文件，然后拉到最后找到deploy: 按照如下进行配置，冒号后面一定要跟空格： 1234deploy: type: git repository: git@github.com:GitHub用户名/GitHub用户名.github.io.git branch: master ​ GitHub用户名就是刚刚新建仓库的名称。保存之后，再依次运行以下命令： bash12npm install hexo-deployer-git --save #安装插件hexo d #上传代码 上传成功之后，然后我们可以到我们GitHub的仓库下看看，是不是把本地的文件上传过去了。然后我们利用其它的浏览器，或者客户端输入 刚刚定义的仓库名称 &lt; https://licqing.github.io/ &gt;就可以访问你的博客了。 ​ 搭建博客的结束，正是入门博客的开始。hexo文档。后续将配置博客样式和书写博客。 4.途中遇见的问题说说第一次搭配遇到的问题和最后怎么解决的吧。 hexo init 命令 ： 错误 conmand not found 。应该是hexo未配置进环境变量，我们找到node_modules文件夹,这时我们发现里面有很多文件夹，找到hexo文件夹,这里我们可以看到一个bin文件夹，进到bin。然后把这个目录加到环境变量path中去。 hexo init 命令 ： 错误 FATAL not empty。存放博客的地方一定是需要空文件夹。注意检查空文件夹。 hexo g 命令 ： 错误 FATAL bad indentation of a mapping entry at line 82, column 13。 _config.yml文件冒号后面没有跟空格 5.参考（可配置域名） https://www.jianshu.com/p/05289a4bc8b2 https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html https://hexo.io/zh-cn/docs/writing","categories":[{"name":"learn","slug":"learn","permalink":"http://yoursite.com/categories/learn/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-04-03T15:05:48.930Z","updated":"2019-04-03T15:05:48.931Z","comments":true,"path":"2019/04/03/hello-world/","link":"","permalink":"http://yoursite.com/2019/04/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}